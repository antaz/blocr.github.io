<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="2760"><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5 samples, 0.18%)</title><rect x="0.0000%" y="325" width="0.1812%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="335.50"></text></g><g><title>[[heap]] (8 samples, 0.29%)</title><rect x="0.0000%" y="341" width="0.2899%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="8"/><text x="0.2500%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (3 samples, 0.11%)</title><rect x="0.1812%" y="325" width="0.1087%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="3"/><text x="0.4312%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.18%)</title><rect x="0.2899%" y="325" width="0.1812%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="5"/><text x="0.5399%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.04%)</title><rect x="0.4710%" y="325" width="0.0362%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="1"/><text x="0.7210%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="0.5072%" y="325" width="0.0725%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="2"/><text x="0.7572%" y="335.50"></text></g><g><title>[[stack]] (9 samples, 0.33%)</title><rect x="0.2899%" y="341" width="0.3261%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="9"/><text x="0.5399%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.04%)</title><rect x="0.5797%" y="325" width="0.0362%" height="15" fill="rgb(228,23,34)" fg:x="16" fg:w="1"/><text x="0.8297%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (7 samples, 0.25%)</title><rect x="0.6159%" y="325" width="0.2536%" height="15" fill="rgb(218,30,26)" fg:x="17" fg:w="7"/><text x="0.8659%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.04%)</title><rect x="0.8696%" y="325" width="0.0362%" height="15" fill="rgb(220,122,19)" fg:x="24" fg:w="1"/><text x="1.1196%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (2 samples, 0.07%)</title><rect x="0.9058%" y="325" width="0.0725%" height="15" fill="rgb(250,228,42)" fg:x="25" fg:w="2"/><text x="1.1558%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (2 samples, 0.07%)</title><rect x="0.9783%" y="325" width="0.0725%" height="15" fill="rgb(240,193,28)" fg:x="27" fg:w="2"/><text x="1.2283%" y="335.50"></text></g><g><title>[anon] (14 samples, 0.51%)</title><rect x="0.6159%" y="341" width="0.5072%" height="15" fill="rgb(216,20,37)" fg:x="17" fg:w="14"/><text x="0.8659%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (2 samples, 0.07%)</title><rect x="1.0507%" y="325" width="0.0725%" height="15" fill="rgb(206,188,39)" fg:x="29" fg:w="2"/><text x="1.3007%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="1.1232%" y="325" width="0.0362%" height="15" fill="rgb(217,207,13)" fg:x="31" fg:w="1"/><text x="1.3732%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.04%)</title><rect x="1.1594%" y="325" width="0.0362%" height="15" fill="rgb(231,73,38)" fg:x="32" fg:w="1"/><text x="1.4094%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="1.1957%" y="325" width="0.0362%" height="15" fill="rgb(225,20,46)" fg:x="33" fg:w="1"/><text x="1.4457%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.04%)</title><rect x="1.2319%" y="325" width="0.0362%" height="15" fill="rgb(210,31,41)" fg:x="34" fg:w="1"/><text x="1.4819%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.25%)</title><rect x="1.2681%" y="325" width="0.2536%" height="15" fill="rgb(221,200,47)" fg:x="35" fg:w="7"/><text x="1.5181%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.18%)</title><rect x="1.5217%" y="325" width="0.1812%" height="15" fill="rgb(226,26,5)" fg:x="42" fg:w="5"/><text x="1.7717%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.07%)</title><rect x="1.7029%" y="325" width="0.0725%" height="15" fill="rgb(249,33,26)" fg:x="47" fg:w="2"/><text x="1.9529%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (7 samples, 0.25%)</title><rect x="1.7754%" y="325" width="0.2536%" height="15" fill="rgb(235,183,28)" fg:x="49" fg:w="7"/><text x="2.0254%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="2.0290%" y="325" width="0.0725%" height="15" fill="rgb(221,5,38)" fg:x="56" fg:w="2"/><text x="2.2790%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (4 samples, 0.14%)</title><rect x="2.1014%" y="325" width="0.1449%" height="15" fill="rgb(247,18,42)" fg:x="58" fg:w="4"/><text x="2.3514%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (2 samples, 0.07%)</title><rect x="2.2464%" y="325" width="0.0725%" height="15" fill="rgb(241,131,45)" fg:x="62" fg:w="2"/><text x="2.4964%" y="335.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="2.3188%" y="325" width="0.0362%" height="15" fill="rgb(249,31,29)" fg:x="64" fg:w="1"/><text x="2.5688%" y="335.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (4 samples, 0.14%)</title><rect x="2.3551%" y="325" width="0.1449%" height="15" fill="rgb(225,111,53)" fg:x="65" fg:w="4"/><text x="2.6051%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="2.5000%" y="325" width="0.0362%" height="15" fill="rgb(238,160,17)" fg:x="69" fg:w="1"/><text x="2.7500%" y="335.50"></text></g><g><title>[unknown] (40 samples, 1.45%)</title><rect x="1.1232%" y="341" width="1.4493%" height="15" fill="rgb(214,148,48)" fg:x="31" fg:w="40"/><text x="1.3732%" y="351.50"></text></g><g><title>oxidfract::render_mandelbrot (1 samples, 0.04%)</title><rect x="2.5362%" y="325" width="0.0362%" height="15" fill="rgb(232,36,49)" fg:x="70" fg:w="1"/><text x="2.7862%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.07%)</title><rect x="6.2319%" y="69" width="0.0725%" height="15" fill="rgb(209,103,24)" fg:x="172" fg:w="2"/><text x="6.4819%" y="79.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="6.2681%" y="53" width="0.0362%" height="15" fill="rgb(229,88,8)" fg:x="173" fg:w="1"/><text x="6.5181%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (23 samples, 0.83%)</title><rect x="6.0507%" y="85" width="0.8333%" height="15" fill="rgb(213,181,19)" fg:x="167" fg:w="23"/><text x="6.3007%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (16 samples, 0.58%)</title><rect x="6.3043%" y="69" width="0.5797%" height="15" fill="rgb(254,191,54)" fg:x="174" fg:w="16"/><text x="6.5543%" y="79.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (9 samples, 0.33%)</title><rect x="6.5580%" y="53" width="0.3261%" height="15" fill="rgb(241,83,37)" fg:x="181" fg:w="9"/><text x="6.8080%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (3 samples, 0.11%)</title><rect x="7.4275%" y="53" width="0.1087%" height="15" fill="rgb(233,36,39)" fg:x="205" fg:w="3"/><text x="7.6775%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (49 samples, 1.78%)</title><rect x="5.9420%" y="101" width="1.7754%" height="15" fill="rgb(226,3,54)" fg:x="164" fg:w="49"/><text x="6.1920%" y="111.50">&lt;..</text></g><g><title>core::slice::raw::from_raw_parts (23 samples, 0.83%)</title><rect x="6.8841%" y="85" width="0.8333%" height="15" fill="rgb(245,192,40)" fg:x="190" fg:w="23"/><text x="7.1341%" y="95.50"></text></g><g><title>core::ptr::slice_from_raw_parts (18 samples, 0.65%)</title><rect x="7.0652%" y="69" width="0.6522%" height="15" fill="rgb(238,167,29)" fg:x="195" fg:w="18"/><text x="7.3152%" y="79.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (5 samples, 0.18%)</title><rect x="7.5362%" y="53" width="0.1812%" height="15" fill="rgb(232,182,51)" fg:x="208" fg:w="5"/><text x="7.7862%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (73 samples, 2.64%)</title><rect x="5.5435%" y="117" width="2.6449%" height="15" fill="rgb(231,60,39)" fg:x="153" fg:w="73"/><text x="5.7935%" y="127.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13 samples, 0.47%)</title><rect x="7.7174%" y="101" width="0.4710%" height="15" fill="rgb(208,69,12)" fg:x="213" fg:w="13"/><text x="7.9674%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.25%)</title><rect x="7.9348%" y="85" width="0.2536%" height="15" fill="rgb(235,93,37)" fg:x="219" fg:w="7"/><text x="8.1848%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.14%)</title><rect x="9.8188%" y="69" width="0.1449%" height="15" fill="rgb(213,116,39)" fg:x="271" fg:w="4"/><text x="10.0688%" y="79.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (2 samples, 0.07%)</title><rect x="9.8913%" y="53" width="0.0725%" height="15" fill="rgb(222,207,29)" fg:x="273" fg:w="2"/><text x="10.1413%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (30 samples, 1.09%)</title><rect x="9.6739%" y="85" width="1.0870%" height="15" fill="rgb(206,96,30)" fg:x="267" fg:w="30"/><text x="9.9239%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (22 samples, 0.80%)</title><rect x="9.9638%" y="69" width="0.7971%" height="15" fill="rgb(218,138,4)" fg:x="275" fg:w="22"/><text x="10.2138%" y="79.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (14 samples, 0.51%)</title><rect x="10.2536%" y="53" width="0.5072%" height="15" fill="rgb(250,191,14)" fg:x="283" fg:w="14"/><text x="10.5036%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (69 samples, 2.50%)</title><rect x="9.0217%" y="101" width="2.5000%" height="15" fill="rgb(239,60,40)" fg:x="249" fg:w="69"/><text x="9.2717%" y="111.50">&lt;a..</text></g><g><title>core::slice::raw::from_raw_parts_mut (21 samples, 0.76%)</title><rect x="10.7609%" y="85" width="0.7609%" height="15" fill="rgb(206,27,48)" fg:x="297" fg:w="21"/><text x="11.0109%" y="95.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (12 samples, 0.43%)</title><rect x="11.0870%" y="69" width="0.4348%" height="15" fill="rgb(225,35,8)" fg:x="306" fg:w="12"/><text x="11.3370%" y="79.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (7 samples, 0.25%)</title><rect x="11.2681%" y="53" width="0.2536%" height="15" fill="rgb(250,213,24)" fg:x="311" fg:w="7"/><text x="11.5181%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (103 samples, 3.73%)</title><rect x="8.1884%" y="117" width="3.7319%" height="15" fill="rgb(247,123,22)" fg:x="226" fg:w="103"/><text x="8.4384%" y="127.50">&lt;all..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (11 samples, 0.40%)</title><rect x="11.5217%" y="101" width="0.3986%" height="15" fill="rgb(231,138,38)" fg:x="318" fg:w="11"/><text x="11.7717%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (7 samples, 0.25%)</title><rect x="11.6667%" y="85" width="0.2536%" height="15" fill="rgb(231,145,46)" fg:x="322" fg:w="7"/><text x="11.9167%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.07%)</title><rect x="11.9203%" y="117" width="0.0725%" height="15" fill="rgb(251,118,11)" fg:x="329" fg:w="2"/><text x="12.1703%" y="127.50"></text></g><g><title>&lt;u32 as core::iter::range::Step&gt;::forward_unchecked (3 samples, 0.11%)</title><rect x="12.2826%" y="85" width="0.1087%" height="15" fill="rgb(217,147,25)" fg:x="339" fg:w="3"/><text x="12.5326%" y="95.50"></text></g><g><title>core::num::&lt;impl u32&gt;::unchecked_add (1 samples, 0.04%)</title><rect x="12.3551%" y="69" width="0.0362%" height="15" fill="rgb(247,81,37)" fg:x="341" fg:w="1"/><text x="12.6051%" y="79.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u32&gt;::clone (2 samples, 0.07%)</title><rect x="12.3913%" y="85" width="0.0725%" height="15" fill="rgb(209,12,38)" fg:x="342" fg:w="2"/><text x="12.6413%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.07%)</title><rect x="12.6087%" y="37" width="0.0725%" height="15" fill="rgb(227,1,9)" fg:x="348" fg:w="2"/><text x="12.8587%" y="47.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (21 samples, 0.76%)</title><rect x="11.9928%" y="117" width="0.7609%" height="15" fill="rgb(248,47,43)" fg:x="331" fg:w="21"/><text x="12.2428%" y="127.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (18 samples, 0.65%)</title><rect x="12.1014%" y="101" width="0.6522%" height="15" fill="rgb(221,10,30)" fg:x="334" fg:w="18"/><text x="12.3514%" y="111.50"></text></g><g><title>core::mem::replace (8 samples, 0.29%)</title><rect x="12.4638%" y="85" width="0.2899%" height="15" fill="rgb(210,229,1)" fg:x="344" fg:w="8"/><text x="12.7138%" y="95.50"></text></g><g><title>core::ptr::read (7 samples, 0.25%)</title><rect x="12.5000%" y="69" width="0.2536%" height="15" fill="rgb(222,148,37)" fg:x="345" fg:w="7"/><text x="12.7500%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.25%)</title><rect x="12.5000%" y="53" width="0.2536%" height="15" fill="rgb(234,67,33)" fg:x="345" fg:w="7"/><text x="12.7500%" y="63.50"></text></g><g><title>_init (2 samples, 0.07%)</title><rect x="12.6812%" y="37" width="0.0725%" height="15" fill="rgb(247,98,35)" fg:x="350" fg:w="2"/><text x="12.9312%" y="47.50"></text></g><g><title>std::panic::catch_unwind (2,676 samples, 96.96%)</title><rect x="2.7536%" y="261" width="96.9565%" height="15" fill="rgb(247,138,52)" fg:x="76" fg:w="2676"/><text x="3.0036%" y="271.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,676 samples, 96.96%)</title><rect x="2.7536%" y="245" width="96.9565%" height="15" fill="rgb(213,79,30)" fg:x="76" fg:w="2676"/><text x="3.0036%" y="255.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,676 samples, 96.96%)</title><rect x="2.7536%" y="229" width="96.9565%" height="15" fill="rgb(246,177,23)" fg:x="76" fg:w="2676"/><text x="3.0036%" y="239.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,676 samples, 96.96%)</title><rect x="2.7536%" y="213" width="96.9565%" height="15" fill="rgb(230,62,27)" fg:x="76" fg:w="2676"/><text x="3.0036%" y="223.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (2,676 samples, 96.96%)</title><rect x="2.7536%" y="197" width="96.9565%" height="15" fill="rgb(216,154,8)" fg:x="76" fg:w="2676"/><text x="3.0036%" y="207.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,676 samples, 96.96%)</title><rect x="2.7536%" y="181" width="96.9565%" height="15" fill="rgb(244,35,45)" fg:x="76" fg:w="2676"/><text x="3.0036%" y="191.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,676 samples, 96.96%)</title><rect x="2.7536%" y="165" width="96.9565%" height="15" fill="rgb(251,115,12)" fg:x="76" fg:w="2676"/><text x="3.0036%" y="175.50">core::ops::function::FnOnce::call_once</text></g><g><title>oxidfract::main (2,676 samples, 96.96%)</title><rect x="2.7536%" y="149" width="96.9565%" height="15" fill="rgb(240,54,50)" fg:x="76" fg:w="2676"/><text x="3.0036%" y="159.50">oxidfract::main</text></g><g><title>oxidfract::render_mandelbrot (2,676 samples, 96.96%)</title><rect x="2.7536%" y="133" width="96.9565%" height="15" fill="rgb(233,84,52)" fg:x="76" fg:w="2676"/><text x="3.0036%" y="143.50">oxidfract::render_mandelbrot</text></g><g><title>oxidfract::lsm (2,400 samples, 86.96%)</title><rect x="12.7536%" y="117" width="86.9565%" height="15" fill="rgb(207,117,47)" fg:x="352" fg:w="2400"/><text x="13.0036%" y="127.50">oxidfract::lsm</text></g><g><title>__libc_start_main (2,677 samples, 96.99%)</title><rect x="2.7536%" y="325" width="96.9928%" height="15" fill="rgb(249,43,39)" fg:x="76" fg:w="2677"/><text x="3.0036%" y="335.50">__libc_start_main</text></g><g><title>main (2,677 samples, 96.99%)</title><rect x="2.7536%" y="309" width="96.9928%" height="15" fill="rgb(209,38,44)" fg:x="76" fg:w="2677"/><text x="3.0036%" y="319.50">main</text></g><g><title>std::rt::lang_start (2,677 samples, 96.99%)</title><rect x="2.7536%" y="293" width="96.9928%" height="15" fill="rgb(236,212,23)" fg:x="76" fg:w="2677"/><text x="3.0036%" y="303.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (2,677 samples, 96.99%)</title><rect x="2.7536%" y="277" width="96.9928%" height="15" fill="rgb(242,79,21)" fg:x="76" fg:w="2677"/><text x="3.0036%" y="287.50">std::rt::lang_start_internal</text></g><g><title>std::sys_common::rt::init (1 samples, 0.04%)</title><rect x="99.7101%" y="261" width="0.0362%" height="15" fill="rgb(211,96,35)" fg:x="2752" fg:w="1"/><text x="99.9601%" y="271.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.04%)</title><rect x="99.7101%" y="245" width="0.0362%" height="15" fill="rgb(253,215,40)" fg:x="2752" fg:w="1"/><text x="99.9601%" y="255.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.04%)</title><rect x="99.7101%" y="229" width="0.0362%" height="15" fill="rgb(211,81,21)" fg:x="2752" fg:w="1"/><text x="99.9601%" y="239.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.04%)</title><rect x="99.7101%" y="213" width="0.0362%" height="15" fill="rgb(208,190,38)" fg:x="2752" fg:w="1"/><text x="99.9601%" y="223.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.04%)</title><rect x="99.7101%" y="197" width="0.0362%" height="15" fill="rgb(235,213,38)" fg:x="2752" fg:w="1"/><text x="99.9601%" y="207.50"></text></g><g><title>__GI___isoc99_sscanf (1 samples, 0.04%)</title><rect x="99.7101%" y="181" width="0.0362%" height="15" fill="rgb(237,122,38)" fg:x="2752" fg:w="1"/><text x="99.9601%" y="191.50"></text></g><g><title>__vfscanf_internal (1 samples, 0.04%)</title><rect x="99.7101%" y="165" width="0.0362%" height="15" fill="rgb(244,218,35)" fg:x="2752" fg:w="1"/><text x="99.9601%" y="175.50"></text></g><g><title>_dl_start_final (1 samples, 0.04%)</title><rect x="99.7464%" y="309" width="0.0362%" height="15" fill="rgb(240,68,47)" fg:x="2753" fg:w="1"/><text x="99.9964%" y="319.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.04%)</title><rect x="99.7464%" y="293" width="0.0362%" height="15" fill="rgb(210,16,53)" fg:x="2753" fg:w="1"/><text x="99.9964%" y="303.50"></text></g><g><title>dl_main (1 samples, 0.04%)</title><rect x="99.7464%" y="277" width="0.0362%" height="15" fill="rgb(235,124,12)" fg:x="2753" fg:w="1"/><text x="99.9964%" y="287.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.04%)</title><rect x="99.7464%" y="261" width="0.0362%" height="15" fill="rgb(224,169,11)" fg:x="2753" fg:w="1"/><text x="99.9964%" y="271.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.04%)</title><rect x="99.7464%" y="245" width="0.0362%" height="15" fill="rgb(250,166,2)" fg:x="2753" fg:w="1"/><text x="99.9964%" y="255.50"></text></g><g><title>openaux (1 samples, 0.04%)</title><rect x="99.7464%" y="229" width="0.0362%" height="15" fill="rgb(242,216,29)" fg:x="2753" fg:w="1"/><text x="99.9964%" y="239.50"></text></g><g><title>_dl_map_object (1 samples, 0.04%)</title><rect x="99.7464%" y="213" width="0.0362%" height="15" fill="rgb(230,116,27)" fg:x="2753" fg:w="1"/><text x="99.9964%" y="223.50"></text></g><g><title>_dl_load_cache_lookup (1 samples, 0.04%)</title><rect x="99.7464%" y="197" width="0.0362%" height="15" fill="rgb(228,99,48)" fg:x="2753" fg:w="1"/><text x="99.9964%" y="207.50"></text></g><g><title>_dl_cache_libcmp (1 samples, 0.04%)</title><rect x="99.7464%" y="181" width="0.0362%" height="15" fill="rgb(253,11,6)" fg:x="2753" fg:w="1"/><text x="99.9964%" y="191.50"></text></g><g><title>_start (2,684 samples, 97.25%)</title><rect x="2.5725%" y="341" width="97.2464%" height="15" fill="rgb(247,143,39)" fg:x="71" fg:w="2684"/><text x="2.8225%" y="351.50">_start</text></g><g><title>_dl_start (2 samples, 0.07%)</title><rect x="99.7464%" y="325" width="0.0725%" height="15" fill="rgb(236,97,10)" fg:x="2753" fg:w="2"/><text x="99.9964%" y="335.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.04%)</title><rect x="99.7826%" y="309" width="0.0362%" height="15" fill="rgb(233,208,19)" fg:x="2754" fg:w="1"/><text x="100.0326%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="99.8188%" y="341" width="0.0362%" height="15" fill="rgb(216,164,2)" fg:x="2755" fg:w="1"/><text x="100.0688%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.04%)</title><rect x="99.8551%" y="341" width="0.0362%" height="15" fill="rgb(220,129,5)" fg:x="2756" fg:w="1"/><text x="100.1051%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.04%)</title><rect x="99.8913%" y="341" width="0.0362%" height="15" fill="rgb(242,17,10)" fg:x="2757" fg:w="1"/><text x="100.1413%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.04%)</title><rect x="99.9275%" y="341" width="0.0362%" height="15" fill="rgb(242,107,0)" fg:x="2758" fg:w="1"/><text x="100.1775%" y="351.50"></text></g><g><title>all (2,760 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="2760"/><text x="0.2500%" y="383.50"></text></g><g><title>oxidfract (2,760 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="2760"/><text x="0.2500%" y="367.50">oxidfract</text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="99.9638%" y="341" width="0.0362%" height="15" fill="rgb(215,21,27)" fg:x="2759" fg:w="1"/><text x="100.2138%" y="351.50"></text></g></svg></svg>